AC_PREREQ([2.19])
AC_INIT([ITSREACH],[0.2],[Yann.Thierry-mieg@lip6.fr])
# We use automake to build makefiles

AM_INIT_AUTOMAKE([-Wall foreign])

# option to indicate libddd folder
AC_ARG_WITH([libddd],
            [AC_HELP_STRING([--with-libddd=/root/of/libddd],
                            [specify the path of libddd])])

AM_CONDITIONAL([WITH_LIBDDD_PATH], [test "x${with_libddd}" != x])
if test "x${with_libddd}" != x; then
    AC_SUBST([LIBDDD_ROOT],[${with_libddd}])
fi

# option to indicate the path to the antlr jar
AC_ARG_WITH([antlrjar],
            [AC_HELP_STRING([--with-antlrjar=/root/of/antlrjar],
                            [specify the path of antlr jar])])

AM_CONDITIONAL([WITH_ANTLRJAR_PATH], [test "x${with_antlrjar}" != x])
if test "x${with_antlrjar}" != x; then
    AC_SUBST([ANTLRJAR_PATH],[${with_antlrjar}])
fi


# option to indicate the path to the antlr C runtime
AC_ARG_WITH([antlrc],
            [AC_HELP_STRING([--with-antlrc=/root/of/antlrc],
                            [specify the path of antlr C runtime])])

AM_CONDITIONAL([WITH_ANTLRC_PATH], [test "x${with_antlrc}" != x])
if test "x${with_antlrc}" != x; then
    AC_SUBST([ANTLRC_ROOT],[${with_antlrc}])
fi



# link time opt, set AR and RANLIB before LT_INIT call, unless configure overrides them.
# also Options for disabling LTO on Darwin since binutils sucks big time on that platform.
nolto=false

AC_ARG_ENABLE(	[nolto],
        [AC_HELP_STRING([--enable-nolto],[avoid using LTO flags, mostly for Darwin])],
        [  case "${enable_nolto}" in
            yes) nolto=true
                ;;
            no)
                ;;
            *)  AC_MSG_ERROR(Bad value ${enableval})
                ;;
            esac])

if test "x$nolto" = "xfalse"; then
   CFLAGS="-flto $CFLAGS"
   CXXFLAGS="-flto $CXXFLAGS"
   test -z "$AR" && AR=gcc-ar
   test -z "$RANLIB" && RANLIB=gcc-ranlib
fi



# AC_CHECK_LIB(tcmalloc, malloc, ,AC_MSG_WARN(google perftool not detected : not using tcmalloc))




#Options for disabling google hash
stdhash=false


AC_ARG_ENABLE(	[stdhash],
        [AC_HELP_STRING([--enable-stdhash],[revert std lib hash map(default uses google sparse hash)])],
        [  case "${enable_stdhash}" in
            yes) stdhash=true
                ;;
            no)
                ;;
            *)  AC_MSG_ERROR(Bad value ${enableval})
                ;;
            esac])

if test "x$stdhash" = "xtrue"; then
    AC_DEFINE([USE_STD_HASH],1,[Define if you want to use std hash instead of google sparse hash.])
fi


AC_ARG_ENABLE([mingw-native],
				[AC_HELP_STRING([--enable-mingw-native],[build native win32 binaries for redistribution])],
				[ case "${enable_mingw_native}" in
					 yes) CXXFLAGS="-DPSAPI_VERSION=1  $CXXFLAGS"
					 LDFLAGS="-Wl,-static,--stack,16777216 $LDFLAGS"
					 LIBS="-lPSAPI -lstdc++ -lpthread $LIBS"
					 ;;
					 no) 
					 ;;
					 *) AC_MSG_ERROR(Bad value ${enableval})
					 ;;
				esac])


AC_ARG_ENABLE([dll],
				[AC_HELP_STRING([--enable-dll],[Activate dynamic library loading input options -t DLL and -t NDLL (not available on Win)])],
				[ case "${enable_dll}" in
					 yes) CXXFLAGS="-DENABLE_DLL=1  $CXXFLAGS"
					 AC_CHECK_LIB(dl, dlopen, ,AC_MSG_WARN(No operational dynamic link libdl found. This is a real problem.))
					 ;;
					 no) 
					 ;;
					 *) AC_MSG_ERROR(Bad value ${enableval})
					 ;;
				esac])



# option to indicate libexpat folder
AC_ARG_WITH([libexpat],
            [AC_HELP_STRING([--with-libexpat=/root/of/libexpat],
                            [specify the path of libexpat])])


AM_CONDITIONAL([WITH_LIBEXPAT_PATH], [test "x${with_libexpat}" != x])
if test "x${with_libexpat}" != x; then
    AC_SUBST([LIBEXPAT_ROOT],[${with_libexpat}])
fi


# option to indicate GNU multi-precision library folder
AC_ARG_WITH([gmp],
            [AC_HELP_STRING([--with-gmp=/root/of/gmp],
                            [specify the path of gmp])])

AM_CONDITIONAL([WITH_GMP_PATH], [test "x${with_gmp}" != x])
if test "x${with_gmp}" != x; then
    AC_SUBST([GMP_ROOT],[${with_gmp}])
fi


# M4 macros location
AC_CONFIG_MACRO_DIR([m4])

# programs used to build
# we make static libs (use ranlib)
AC_PROG_RANLIB
# programs used to build
# we make static libs (use ranlib)
# we make shared libs (use libtool)
m4_ifdef([AM_PROG_AR], [AM_PROG_AR])
LT_INIT([])

AC_LIBTOOL_DLOPEN


# we compile C++
# set Cxx compilation flags to either the value passed in
# ./configure --cxxflags=
# or none to change behavior from default cxx flags generated by autoconf
# default : -02 -g
test -z "$CFLAGS" && CFLAGS=
test -z "$CXXFLAGS" && CXXFLAGS=

# we compile C++11
CFLAGS="-std=c11 $CFLAGS"
CXXFLAGS="-std=c++11 $CXXFLAGS"

# Option to enable hash stats
AC_ARG_ENABLE([hash-stat],
				[AC_HELP_STRING([--enable-hash-stat],[collect stats on hash])],
				[ case "${enable_hash_stat}" in
					 yes) CFLAGS="-DHASH_STAT $CFLAGS"
					 CXXFLAGS="-DHASH_STAT $CXXFLAGS"
					 ;;
					 no)
					 ;;
					 *) AC_MSG_ERROR(Bad value ${enableval})
					 ;;
				esac])

#compile in C++
AC_PROG_CC
AC_PROG_CXX
AC_LANG(C++)

#use bison/flex parsers
AM_PROG_LEX
AC_PROG_YACC

CPPFLAGS="-Wno-unused-local-typedefs $CPPFLAGS"
#LDFLAGS = -static-libgcc -static-libstdc++ $(LDFLAGS)

# define HAS_STDC_HEADERS
AC_HEADER_STDC

AC_CHECK_TOOL([STRIP],[strip])

# automake :
# build these Makefile using the Makefile.in files in each directory
AC_CONFIG_FILES([
  Makefile
  its/Makefile
  lib/Makefile
  its/expression/Makefile
  its/parser_RdPE/Makefile
  its/parser_CAMI/Makefile
  its/gal/Makefile
  its/gal/parser/Makefile
  bin/Makefile
  Samples/Makefile
  Samples/prod/Makefile
  Samples/prod/Generators/Makefile			
  Samples/prod/Generators/CiardoPN2000/Makefile
  Samples/prod/Generators/Other/Makefile
  tests/Makefile
])

#  demo/Makefile # skipped/unused in releases


# Do it !! (mandatory)
AC_OUTPUT
