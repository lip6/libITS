GAL Philosophers {
	typedef Philo = 0 .. 4 ;
	array [5] Think = (1, 1, 1, 1, 1) ;
	array [5] Fork = (1, 1, 1, 1, 1) ;
	array [5] Catch1 = (0, 0, 0, 0, 0) ;
	array [5] Catch2 = (0, 0, 0, 0, 0) ;
	array [5] Eat = (0, 0, 0, 0, 0) ;

	transition FF1a (Philo $x) [Think [$x] >= 1 && Fork [(($x - 1) % 5 + 5) % 5] >= 1] {
		Think [$x] = Think [$x] - 1 ;
		Fork [(($x - 1) % 5 + 5) % 5] = Fork [(($x - 1) % 5 + 5) % 5] - 1 ;
		Catch1 [$x] = Catch1 [$x] + 1 ;
	}

	transition FF1b (Philo $x) [Think [$x] >= 1 && Fork [$x] >= 1] {
		Think [$x] = Think [$x] - 1 ;
		Fork [$x] = Fork [$x] - 1 ;
		Catch2 [$x] = Catch2 [$x] + 1 ;
	}

	transition FF2a (Philo $x) [Fork [$x] >= 1 && Catch1 [$x] >= 1] {
		Fork [$x] = Fork [$x] - 1 ;
		Catch1 [$x] = Catch1 [$x] - 1 ;
		Eat [$x] = Eat [$x] + 1 ;
	}

	transition FF2b (Philo $x) [Fork [(($x - 1) % 5 + 5) % 5] >= 1 && Catch2 [$x] >= 1] {
		Fork [(($x - 1) % 5 + 5) % 5] = Fork [(($x - 1) % 5 + 5) % 5] - 1 ;
		Catch2 [$x] = Catch2 [$x] - 1 ;
		Eat [$x] = Eat [$x] + 1 ;
	}

	transition End (Philo $x) [Eat [$x] >= 1] {
		Eat [$x] = Eat [$x] - 1 ;
		Fork [$x] = Fork [$x] + 1 ;
		Fork [(($x - 1) % 5 + 5) % 5] = Fork [(($x - 1) % 5 + 5) % 5] + 1 ;
		Think [$x] = Think [$x] + 1 ;
	}
	TRANSIENT = false ;
}