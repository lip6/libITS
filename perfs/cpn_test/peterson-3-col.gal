GAL Peterson {
	typedef Process = 0 .. 3 ;
	typedef Tour = 0 .. 2 ;
	array [4] Idle = (1, 1, 1, 1) ;
	array [8] WantSection = (1, 0, 1, 0, 1, 0, 1, 0) ;
	array [12] AskForSection = (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) ;
	array [12] Turn = (1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0) ;
	array [12] TestTurn = (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) ;
	array [48] BeginLoop = (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) ;
	array [12] EndTurn = (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) ;
	array [4] CS = (0, 0, 0, 0) ;
	array [48] TestIdentity = (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) ;
	array [48] TestAlone = (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) ;
	array [48] IsEndLoop = (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) ;

	transition Ask (Process $i) [Idle [$i] >= 1 && WantSection [$i * 2 + 0] >= 1] {
		Idle [$i] = Idle [$i] - 1 ;
		WantSection [$i * 2 + 0] = WantSection [$i * 2 + 0] - 1 ;
		WantSection [$i * 2 + 1] = WantSection [$i * 2 + 1] + 1 ;
		AskForSection [$i * 3 + 0] = AskForSection [$i * 3 + 0] + 1 ;
	}

	transition UpdateTurn (Tour $j, Process $k, Process $i) [Turn [$j * 4 + $k] >= 1 && AskForSection [$i * 3 + $j] >=
	1] {
		Turn [$j * 4 + $k] = Turn [$j * 4 + $k] - 1 ;
		AskForSection [$i * 3 + $j] = AskForSection [$i * 3 + $j] - 1 ;
		Turn [$j * 4 + $i] = Turn [$j * 4 + $i] + 1 ;
		TestTurn [$i * 3 + $j] = TestTurn [$i * 3 + $j] + 1 ;
	}

	transition TurnEqual (Tour $j, Process $i) [TestTurn [$i * 3 + $j] >= 1 && Turn [$j * 4 + $i] >= 1] {
		TestTurn [$i * 3 + $j] = TestTurn [$i * 3 + $j] - 1 ;
		BeginLoop [$i * 12 + ($j * 4 + 0)] = BeginLoop [$i * 12 + ($j * 4 + 0)] + 1 ;
	}

	transition TurnDiff (Tour $j, Process $k, Process $i) [$i != $k && Turn [$j * 4 + $k] >= 1 && TestTurn [$i * 3 + $j]
	>= 1] {
		TestTurn [$i * 3 + $j] = TestTurn [$i * 3 + $j] - 1 ;
		EndTurn [$i * 3 + $j] = EndTurn [$i * 3 + $j] + 1 ;
	}

	transition AccessCS (Process $i) [EndTurn [$i * 3 + 2] >= 1] {
		EndTurn [$i * 3 + 2] = EndTurn [$i * 3 + 2] - 1 ;
		CS [$i] = CS [$i] + 1 ;
	}

	transition ProgressTurn (Tour $j, Process $i) [$j != 2 && EndTurn [$i * 3 + $j] >= 1] {
		EndTurn [$i * 3 + $j] = EndTurn [$i * 3 + $j] - 1 ;
		AskForSection [$i * 3 + ($j + 1) % 3] = AskForSection [$i * 3 + ($j + 1) % 3] + 1 ;
	}

	transition BecomeIdle (Process $i) [CS [$i] >= 1 && WantSection [$i * 2 + 1] >= 1] {
		CS [$i] = CS [$i] - 1 ;
		WantSection [$i * 2 + 1] = WantSection [$i * 2 + 1] - 1 ;
		WantSection [$i * 2 + 0] = WantSection [$i * 2 + 0] + 1 ;
		Idle [$i] = Idle [$i] + 1 ;
	}

	transition ContinueLoop (Tour $j, Process $k, Process $i) [BeginLoop [$i * 12 + ($j * 4 + $k)] >= 1] {
		BeginLoop [$i * 12 + ($j * 4 + $k)] = BeginLoop [$i * 12 + ($j * 4 + $k)] - 1 ;
		TestIdentity [$i * 12 + ($j * 4 + $k)] = TestIdentity [$i * 12 + ($j * 4 + $k)] + 1 ;
	}

	transition Identity (Tour $j, Process $i) [TestIdentity [$i * 12 + ($j * 4 + $i)] >= 1] {
		TestIdentity [$i * 12 + ($j * 4 + $i)] = TestIdentity [$i * 12 + ($j * 4 + $i)] - 1 ;
		IsEndLoop [$i * 12 + ($j * 4 + $i)] = IsEndLoop [$i * 12 + ($j * 4 + $i)] + 1 ;
	}

	transition NoIdentity (Tour $j, Process $k, Process $i) [$i != $k && TestIdentity [$i * 12 + ($j * 4 + $k)] >= 1] {
		TestIdentity [$i * 12 + ($j * 4 + $k)] = TestIdentity [$i * 12 + ($j * 4 + $k)] - 1 ;
		TestAlone [$i * 12 + ($j * 4 + $k)] = TestAlone [$i * 12 + ($j * 4 + $k)] + 1 ;
	}

	transition Loop (Tour $j, Process $k, Process $i) [$k != 3 && IsEndLoop [$i * 12 + ($j * 4 + $k)] >= 1] {
		IsEndLoop [$i * 12 + ($j * 4 + $k)] = IsEndLoop [$i * 12 + ($j * 4 + $k)] - 1 ;
		BeginLoop [$i * 12 + ($j * 4 + ($k + 1) % 4)] = BeginLoop [$i * 12 + ($j * 4 + ($k + 1) % 4)] + 1 ;
	}

	transition NotAlone (Tour $j, Process $k, Process $i) [TestAlone [$i * 12 + ($j * 4 + $k)] >= 1 && WantSection [$k *
	2 + 1] >= 1] {
		TestAlone [$i * 12 + ($j * 4 + $k)] = TestAlone [$i * 12 + ($j * 4 + $k)] - 1 ;
		TestTurn [$i * 3 + $j] = TestTurn [$i * 3 + $j] + 1 ;
	}

	transition Alone1 (Tour $j, Process $k, Process $i) [TestAlone [$i * 12 + ($j * 4 + $k)] >= 1 && WantSection [$k * 2
	+ 0] >= 1] {
		TestAlone [$i * 12 + ($j * 4 + $k)] = TestAlone [$i * 12 + ($j * 4 + $k)] - 1 ;
		IsEndLoop [$i * 12 + ($j * 4 + $k)] = IsEndLoop [$i * 12 + ($j * 4 + $k)] + 1 ;
	}

	transition EndLoop (Tour $j, Process $i) [IsEndLoop [$i * 12 + ($j * 4 + 3)] >= 1] {
		IsEndLoop [$i * 12 + ($j * 4 + 3)] = IsEndLoop [$i * 12 + ($j * 4 + 3)] - 1 ;
		EndTurn [$i * 3 + $j] = EndTurn [$i * 3 + $j] + 1 ;
	}
	TRANSIENT = false ;
}