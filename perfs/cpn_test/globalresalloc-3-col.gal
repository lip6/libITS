GAL Global_Allocation_Resource_Management {
	typedef Proc = 0 .. 2 ;
	typedef Res = 0 .. 5 ;
	array [3] Processes = (1, 1, 1) ;
	array [6] Resources = (1, 1, 1, 1, 1, 1) ;
	array [3] pr_in = (0, 0, 0) ;
	array [18] in_critical_s = (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) ;
	array [3] pr_released = (0, 0, 0) ;

	transition enter1 (Proc $p, Res $r1) [Processes [$p] >= 1 && Resources [$r1] >= 1] {
		Processes [$p] = Processes [$p] - 1 ;
		Resources [$r1] = Resources [$r1] - 1 ;
		pr_in [$p] = pr_in [$p] + 1 ;
		pr_released [$p] = pr_released [$p] + 3 ;
		in_critical_s [$p * 6 + $r1] = in_critical_s [$p * 6 + $r1] + 1 ;
	}

	transition enter2 (Proc $p, Res $r2, Res $r1) [Processes [$p] >= 1 && Resources [$r1] >= 1 && Resources [$r2] >= 1] {
		Processes [$p] = Processes [$p] - 1 ;
		Resources [$r1] = Resources [$r1] - 1 ;
		Resources [$r2] = Resources [$r2] - 1 ;
		pr_in [$p] = pr_in [$p] + 2 ;
		in_critical_s [$p * 6 + $r1] = in_critical_s [$p * 6 + $r1] + 1 ;
		in_critical_s [$p * 6 + $r2] = in_critical_s [$p * 6 + $r2] + 1 ;
		pr_released [$p] = pr_released [$p] + 2 ;
	}

	transition enter3 (Res $r3, Proc $p, Res $r2, Res $r1) [Resources [$r1] >= 1 && Resources [$r2] >= 1 && Resources
	[$r3] >= 1 && Processes [$p] >= 1] {
		Resources [$r3] = Resources [$r3] - 1 ;
		Resources [$r1] = Resources [$r1] - 1 ;
		Resources [$r2] = Resources [$r2] - 1 ;
		Processes [$p] = Processes [$p] - 1 ;
		pr_in [$p] = pr_in [$p] + 3 ;
		pr_released [$p] = pr_released [$p] + 1 ;
		in_critical_s [$p * 6 + $r1] = in_critical_s [$p * 6 + $r1] + 1 ;
		in_critical_s [$p * 6 + $r2] = in_critical_s [$p * 6 + $r2] + 1 ;
		in_critical_s [$p * 6 + $r3] = in_critical_s [$p * 6 + $r3] + 1 ;
	}

	transition enter4 (Res $r4, Res $r3, Proc $p, Res $r2, Res $r1) [Resources [$r1] >= 1 && Resources [$r3] >= 1 &&
	Resources [$r4] >= 1 && Resources [$r2] >= 1 && Processes [$p] >= 1] {
		Resources [$r4] = Resources [$r4] - 1 ;
		Resources [$r2] = Resources [$r2] - 1 ;
		Resources [$r3] = Resources [$r3] - 1 ;
		Resources [$r1] = Resources [$r1] - 1 ;
		Processes [$p] = Processes [$p] - 1 ;
		in_critical_s [$p * 6 + $r3] = in_critical_s [$p * 6 + $r3] + 1 ;
		in_critical_s [$p * 6 + $r1] = in_critical_s [$p * 6 + $r1] + 1 ;
		in_critical_s [$p * 6 + $r4] = in_critical_s [$p * 6 + $r4] + 1 ;
		in_critical_s [$p * 6 + $r2] = in_critical_s [$p * 6 + $r2] + 1 ;
		pr_in [$p] = pr_in [$p] + 4 ;
	}

	transition exit (Proc $p) [pr_released [$p] >= 4] {
		pr_released [$p] = pr_released [$p] - 4 ;
		Processes [$p] = Processes [$p] + 1 ;
	}

	transition release1 (Proc $p, Res $r1) [pr_in [$p] >= 1 && in_critical_s [$p * 6 + $r1] >= 1] {
		pr_in [$p] = pr_in [$p] - 1 ;
		in_critical_s [$p * 6 + $r1] = in_critical_s [$p * 6 + $r1] - 1 ;
		pr_released [$p] = pr_released [$p] + 1 ;
		Resources [$r1] = Resources [$r1] + 1 ;
	}

	transition release2 (Proc $p, Res $r2, Res $r1) [pr_in [$p] >= 2 && in_critical_s [$p * 6 + $r1] >= 1 &&
	in_critical_s [$p * 6 + $r2] >= 1] {
		pr_in [$p] = pr_in [$p] - 2 ;
		in_critical_s [$p * 6 + $r1] = in_critical_s [$p * 6 + $r1] - 1 ;
		in_critical_s [$p * 6 + $r2] = in_critical_s [$p * 6 + $r2] - 1 ;
		Resources [$r1] = Resources [$r1] + 1 ;
		Resources [$r2] = Resources [$r2] + 1 ;
		pr_released [$p] = pr_released [$p] + 2 ;
	}
	TRANSIENT = false ;
}